{"$id": "https://api.jina.ai/schemas/2.6.5.json", "$schema": "http://json-schema.org/draft-07/schema#", "definitions": {"Jina::Executors::All": {"minItems": 1, "type": "array"}, "Jina::Flow": {"additionalProperties": false, "properties": {"executors": {"description": "Define the steps in the Flow.\nA Pod is a container and interface for one or multiple Peas that have the same properties.", "items": {"$ref": "#/definitions/Jina::Pod"}, "minItems": 1, "type": "array"}, "jtype": {"default": "Flow", "description": "The type of Jina object (Flow, Executor).\nA Flow is made up of several sub-tasks, and it manages the states and context of these sub-tasks.\nThe input and output data of Flows are Documents.", "enum": ["Flow"], "type": "string"}, "version": {"default": "'1'", "description": "The YAML version of this Flow.", "type": "string"}, "with": {"additionalProperties": false, "description": "The config of Flow, unrecognized config arguments will be applied to all Pods", "properties": {"env": {"default": null, "description": "The map of environment variables that are available inside runtime", "type": "object"}, "inspect": {"default": "COLLECT", "description": "The strategy on those inspect pods in the flow.\n\n    If `REMOVE` is given then all inspect pods are removed when building the flow.", "enum": ["HANG", "REMOVE", "COLLECT"], "type": "string"}, "log_config": {"default": "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml", "description": "The YAML config of the logger used in this object.", "type": "string"}, "name": {"default": null, "description": "The name of this object.\n\nThis will be used in the following places:\n- how you refer to this object in Python/YAML/CLI\n- visualization\n- log message header\n- ...\n\nWhen not given, then the default naming strategy will apply.", "type": "string"}, "quiet": {"default": false, "description": "If set, then no log will be emitted from this object.", "type": "boolean"}, "quiet_error": {"default": false, "description": "If set, then exception stack information will not be added to the log", "type": "boolean"}, "reduce": {"default": false, "description": "If set, DocumentArray matrix will be reduced into one DocumentArray before reaching this pod", "type": "boolean"}, "static_routing_table": {"default": false, "description": "Defines if the routing table should be pre computed by the Flow. In this case it is statically defined for each Pod and not send on every data request. Can not be used in combination with external pods", "type": "boolean"}, "uses": {"default": null, "description": "The YAML file represents a flow", "type": "string"}, "workspace": {"default": "./", "description": "The working directory for any IO operations in this object. If not set, then derive from its parent `workspace`.", "type": "string"}}, "required": [], "type": "object"}}, "required": ["jtype", "version", "pods"], "type": "object"}, "Jina::Metas": {"additionalProperties": false, "description": "The meta config of the Executor", "properties": {"description": {"default": null, "description": "The description of this executor. It will be used in automatics docs UI", "type": "string"}, "name": {"default": null, "description": "The name of the executor.", "type": "string"}, "py_modules": {"default": null, "description": "\nThe external python module paths. it is useful when you want to load external python modules\nusing :func:`BaseExecutor.load_config` from a YAML file. If a relative path is given then the root path is set to\nthe path of the current YAML file.\n\nExample of ``py_module`` usage:\n\n1. This is a valid structure and it is RECOMMENDED:\n    - \"my_cust_module\" is a python module\n    - all core logic of your customized executor goes to ``__init__.py``\n    - to import ``foo.py``, you can use relative import, e.g. ``from .foo import bar``\n    - ``helper.py`` needs to be put BEFORE `__init__.py` in YAML ``py_modules``\n\nThis is also the structure given by ``jina hub new`` CLI.\n\n    .. highlight:: text\n    .. code-block:: text\n\n         my_cust_module\n           |- __init__.py\n           |- helper.py\n           |- config.yml\n                |- py_modules\n                       |- helper.py\n                       |- __init__.py\n\n2. This is a valid structure but not recommended:\n    - \"my_cust_module\" is not a python module (lack of __init__.py under the root)\n    - to import ``foo.py``, you must to use ``from jinahub.foo import bar``\n    - ``jinahub`` is a common namespace for all plugin-modules, not changeable.\n    - ``helper.py`` needs to be put BEFORE `my_cust.py` in YAML ``py_modules``\n\n    .. highlight:: text\n    .. code-block:: text\n\n         my_cust_module\n           |- my_cust.py\n           |- helper.py\n           |- config.yml\n                |- py_modules\n                       |- helper.py\n                       |- my_cust.py                \n                ", "items": {"minItems": 1, "type": "string", "uniqueItems": true}, "type": "array"}}, "required": [], "type": "object"}, "Jina::Pod": {"additionalProperties": false, "description": "Define the config of a Pod.", "items": {"minItems": 1, "type": "string", "uniqueItems": true}, "properties": {"connect_to_predecessor": {"default": false, "description": "The head Pea of this Pod will connect to the TailPea of the predecessor Pod.", "type": "boolean"}, "ctrl_with_ipc": {"default": false, "description": "If set, use ipc protocol for control socket", "type": "boolean"}, "daemon": {"default": false, "description": "The Pea attempts to terminate all of its Runtime child processes/threads on existing. setting it to true basically tell the Pea do not wait on the Runtime when closing", "type": "boolean"}, "docker_kwargs": {"default": null, "description": "Dictionary of kwargs arguments that will be passed to Docker SDK when starting the docker '\ncontainer. \n\nMore details can be found in the Docker SDK docs:  https://docker-py.readthedocs.io/en/stable/", "type": "object"}, "entrypoint": {"default": null, "description": "The entrypoint command overrides the ENTRYPOINT in Docker image. when not set then the Docker image ENTRYPOINT takes effective.", "type": "string"}, "env": {"default": null, "description": "The map of environment variables that are available inside runtime", "type": "object"}, "expose_public": {"default": false, "description": "If set, expose the public IP address to remote when necessary, by default it exposesprivate IP address, which only allows accessing under the same network/subnet. Important to set this to true when the Pea will receive input connections from remote Peas", "type": "boolean"}, "external": {"default": false, "description": "The Pod will be considered an external Pod that has been started independently from the Flow.This Pod will not be context managed by the Flow.", "type": "boolean"}, "force_update": {"default": false, "description": "If set, always pull the latest Hub Executor bundle even it exists on local", "type": "boolean"}, "gpus": {"default": null, "description": "This argument allows dockerized Jina executor discover local gpu devices.\n\n    Note, \n    - To access all gpus, use `--gpus all`.\n    - To access multiple gpus, e.g. make use of 2 gpus, use `--gpus 2`.\n    - To access specified gpus based on device id, use `--gpus device=[YOUR-GPU-DEVICE-ID]`\n    - To access specified gpus based on multiple device id, use `--gpus device=[YOUR-GPU-DEVICE-ID1],device=[YOUR-GPU-DEVICE-ID2]`\n    - To specify more parameters, use `--gpus device=[YOUR-GPU-DEVICE-ID],runtime=nvidia,capabilities=display", "type": "string"}, "host": {"default": "0.0.0.0", "description": "The host address of the runtime, by default it is 0.0.0.0.", "type": "string"}, "host_in": {"default": "0.0.0.0", "description": "The host address for input, by default it is 0.0.0.0", "type": "string"}, "host_out": {"default": "0.0.0.0", "description": "The host address for output, by default it is 0.0.0.0", "type": "string"}, "hosts_in_connect": {"default": null, "description": "The host address for input, by default it is 0.0.0.0", "type": "array"}, "install_requirements": {"default": false, "description": "If set, install `requirements.txt` in the Hub Executor bundle to local", "type": "boolean"}, "log_config": {"default": "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml", "description": "The YAML config of the logger used in this object.", "type": "string"}, "memory_hwm": {"default": -1, "description": "The memory high watermark of this pod in Gigabytes, pod will restart when this is reached. -1 means no restriction", "type": "number"}, "method": {"default": "add", "description": "The method to use when appending the Pod to the Flow", "enum": ["add", "needs", "inspect", "needs_all", "gather_inspect"], "type": "string"}, "name": {"default": null, "description": "The name of this object.\n\nThis will be used in the following places:\n- how you refer to this object in Python/YAML/CLI\n- visualization\n- log message header\n- ...\n\nWhen not given, then the default naming strategy will apply.", "type": "string"}, "native": {"default": false, "description": "If set, only native Executors is allowed, and the Executor is always run inside ZEDRuntime.", "type": "boolean"}, "needs": {"description": "The name of the Pod(s) that this Pod receives data from. One can also use `gateway` to indicate the connection with the gateway.\nThis is useful to create parallelization. By default the Flow always works sequentially following the defined order of the Pods.", "items": {"minItems": 1, "type": "string", "uniqueItems": true}, "type": ["array", "string"]}, "on_error_strategy": {"default": "IGNORE", "description": "The skip strategy on exceptions.\n\n- IGNORE: Ignore it, keep running all Executors in the sequel flow\n- SKIP_HANDLE: Skip all Executors in the sequel, only `pre_hook` and `post_hook` are called\n- THROW_EARLY: Immediately throw the exception, the sequel flow will not be running at all\n\nNote, `IGNORE`, `SKIP_EXECUTOR` and `SKIP_HANDLE` do not guarantee the success execution in the sequel flow. If something\nis wrong in the upstream, it is hard to carry this exception and moving forward without any side-effect.", "enum": ["IGNORE", "SKIP_HANDLE", "THROW_EARLY"], "type": "string"}, "peas_hosts": {"default": null, "description": "The hosts of the peas when shards greater than 1.\n        Peas will be evenly distributed among the hosts. By default,\n        peas are running on host provided by the argument ``host``", "type": "array"}, "polling": {"default": "ANY", "description": "The polling strategy of the Pod (when `shards>1`)\n- ANY: only one (whoever is idle) Pea polls the message\n- ALL: all Peas poll the message (like a broadcast)", "enum": ["ANY", "ALL", "ALL_ASYNC"], "type": "string"}, "port_ctrl": {"default": 50239, "description": "The port for controlling the runtime, default a random port between [49152, 65535]", "type": "number"}, "port_in": {"default": 48559, "description": "The port for input data, default a random port between [49152, 65535]", "type": "number"}, "port_jinad": {"default": 8000, "description": "The port of the remote machine for usage with JinaD.", "type": "number"}, "port_out": {"default": 33449, "description": "The port for output data, default a random port between [49152, 65535]", "type": "number"}, "pull_latest": {"default": false, "description": "Pull the latest image before running", "type": "boolean"}, "py_modules": {"default": null, "description": "The customized python modules need to be imported before loading the executor\n\nNote that the recommended way is to only import a single module - a simple python file, if your\nexecutor can be defined in a single file, or an ``__init__.py`` file if you have multiple files,\nwhich should be structured as a python package. For more details, please see the\n`Executor cookbook <https://docs.jina.ai/fundamentals/executor/repository-structure/>`__", "type": "array"}, "quiet": {"default": false, "description": "If set, then no log will be emitted from this object.", "type": "boolean"}, "quiet_error": {"default": false, "description": "If set, then exception stack information will not be added to the log", "type": "boolean"}, "quiet_remote_logs": {"default": false, "description": "Do not display the streaming of remote logs on local console", "type": "boolean"}, "reduce": {"default": false, "description": "If set, DocumentArray matrix will be reduced into one DocumentArray before reaching this pod", "type": "boolean"}, "replicas": {"default": 1, "description": "The number of replicas in the pod, `port_in` and `port_out` will be set to random, and routers will be added automatically when necessary", "type": "number"}, "runs_in_docker": {"default": false, "description": "Informs a Pea that runs in a container. Important to properly set networking information", "type": "boolean"}, "runtime_backend": {"default": "PROCESS", "description": "The parallel backend of the runtime inside the Pea", "enum": ["THREAD", "PROCESS"], "type": "string"}, "runtime_cls": {"default": "ZEDRuntime", "description": "The runtime class to run inside the Pea", "type": "string"}, "scheduling": {"default": "LOAD_BALANCE", "description": "The strategy of scheduling workload among Peas", "enum": ["LOAD_BALANCE", "ROUND_ROBIN"], "type": "string"}, "shards": {"default": 1, "description": "The number of shards in the pod running at the same time, `port_in` and `port_out` will be set to random, and routers will be added automatically when necessary. For more details check https://docs.jina.ai/fundamentals/flow/topology/", "type": "number"}, "socket_in": {"default": "PULL_BIND", "description": "The socket type for input port", "enum": ["PULL_BIND", "PULL_CONNECT", "PUSH_BIND", "PUSH_CONNECT", "SUB_BIND", "SUB_CONNECT", "PUB_BIND", "PUB_CONNECT", "PAIR_BIND", "PAIR_CONNECT", "ROUTER_BIND", "DEALER_CONNECT", "ROUTER_CONNECT"], "type": "string"}, "socket_out": {"default": "PUSH_BIND", "description": "The socket type for output port", "enum": ["PULL_BIND", "PULL_CONNECT", "PUSH_BIND", "PUSH_CONNECT", "SUB_BIND", "SUB_CONNECT", "PUB_BIND", "PUB_CONNECT", "PAIR_BIND", "PAIR_CONNECT", "ROUTER_BIND", "DEALER_CONNECT", "ROUTER_CONNECT"], "type": "string"}, "ssh_keyfile": {"default": null, "description": "This specifies a key to be used in ssh login, default None. regular default ssh keys will be used without specifying this argument.", "type": "string"}, "ssh_password": {"default": null, "description": "The ssh password to the ssh server.", "type": "string"}, "ssh_server": {"default": null, "description": "The SSH server through which the tunnel will be created, can actually be a fully specified `user@server:port` ssh url.", "type": "string"}, "static_routing_table": {"default": false, "description": "Defines if the routing table should be pre computed by the Flow. In this case it is statically defined for each Pod and not send on every data request. Can not be used in combination with external pods", "type": "boolean"}, "timeout_ctrl": {"default": 5000, "description": "The timeout in milliseconds of the control request, -1 for waiting forever", "type": "number"}, "timeout_ready": {"default": 600000, "description": "The timeout in milliseconds of a Pea waits for the runtime to be ready, -1 for waiting forever", "type": "number"}, "upload_files": {"default": null, "description": "The files on the host to be uploaded to the remote\nworkspace. This can be useful when your Pod has more\nfile dependencies beyond a single YAML file, e.g.\nPython files, data files.\n\nNote,\n- currently only flatten structure is supported, which means if you upload `[./foo/a.py, ./foo/b.pp, ./bar/c.yml]`, then they will be put under the _same_ workspace on the remote, losing all hierarchies.\n- by default, `--uses` YAML file is always uploaded.\n- uploaded files are by default isolated across the runs. To ensure files are submitted to the same workspace across different runs, use `--workspace-id` to specify the workspace.", "type": "array"}, "uses": {"default": "BaseExecutor", "description": "The config of the executor, it could be one of the followings:\n        * an Executor YAML file (.yml, .yaml, .jaml)\n        * a Jina Hub Executor (must start with `jinahub://` or `jinahub+docker://`)\n        * a docker image (must start with `docker://`)\n        * the string literal of a YAML config (must start with `!` or `jtype: `)\n        * the string literal of a JSON config\n\n        When use it under Python, one can use the following values additionally:\n        - a Python dict that represents the config\n        - a text file stream has `.read()` interface", "type": "string"}, "uses_after": {"default": null, "description": "The executor attached after the Peas described by --uses, typically used for receiving from all shards, accepted type follows `--uses`", "type": "string"}, "uses_before": {"default": null, "description": "The executor attached after the Peas described by --uses, typically before sending to all shards, accepted type follows `--uses`", "type": "string"}, "uses_metas": {"default": null, "description": "Dictionary of keyword arguments that will override the `metas` configuration in `uses`", "type": "object"}, "uses_requests": {"default": null, "description": "Dictionary of keyword arguments that will override the `requests` configuration in `uses`", "type": "object"}, "uses_with": {"default": null, "description": "Dictionary of keyword arguments that will override the `with` configuration in `uses`", "type": "object"}, "volumes": {"default": null, "description": "The path on the host to be mounted inside the container. \n\nNote, \n- If separated by `:`, then the first part will be considered as the local host path and the second part is the path in the container system. \n- If no split provided, then the basename of that directory will be mounted into container's root path, e.g. `--volumes=\"/user/test/my-workspace\"` will be mounted into `/my-workspace` inside the container. \n- All volumes are mounted with read-write mode.", "type": "array"}, "workspace": {"default": null, "description": "The working directory for any IO operations in this object. If not set, then derive from its parent `workspace`.", "type": "string"}, "zmq_identity": {"default": null, "description": "The identity of a ZMQRuntime. It is used for unique socket identification towards other ZMQRuntimes.", "type": "string"}}, "required": [], "type": "object"}}, "description": "The YAML schema of Jina objects (Flow, Executor).", "oneOf": [{"$ref": "#/definitions/Jina::Flow"}], "type": "object"}