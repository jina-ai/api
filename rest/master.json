{"openapi": "3.0.2", "info": {"title": "My Jina Service", "description": "This is my awesome service. You can set `title` and `description` in your `Flow` or `Gateway` to customize this text.", "version": "3.0.0", "x-logo": {"url": "https://api.jina.ai/logo/logo-product/jina-core/horizontal-layout/colored/Product%20logo_Core_vertical_colorful%402x-margin.png"}}, "paths": {"/status": {"get": {"tags": ["Debug"], "summary": "Get the status of Jina service", "description": "Get the status of this Jina service.\n\nThis is equivalent to running `jina -vf` from command line.\n\n.. # noqa: DAR201", "operationId": "_status_status_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaStatusModel"}}}}}}}, "/post": {"post": {"tags": ["Debug"], "summary": "Post a data request to some endpoint", "description": "Post a data request to some endpoint.\n\nThis is equivalent to the following:\n\n    from jina import Flow\n\n    f = Flow().add(...)\n\n    with f:\n        f.post(endpoint, ...)\n\n.. # noqa: DAR201\n.. # noqa: DAR101", "operationId": "post_post_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaEndpointRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/index": {"post": {"tags": ["CRUD"], "summary": "/Index", "description": "Post data requests to the Flow. Executors with `@requests(on=\"/index\")` will respond.", "operationId": "_index_index_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/search": {"post": {"tags": ["CRUD"], "summary": "/Search", "description": "Post data requests to the Flow. Executors with `@requests(on=\"/search\")` will respond.", "operationId": "_search_search_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/delete": {"delete": {"tags": ["CRUD"], "summary": "/Delete", "description": "Post data requests to the Flow. Executors with `@requests(on=\"/delete\")` will respond.", "operationId": "_delete_delete_delete", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/update": {"put": {"tags": ["CRUD"], "summary": "/Update", "description": "Post data requests to the Flow. Executors with `@requests(on=\"/update\")` will respond.", "operationId": "_update_update_put", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"ExceptionProto": {"title": "ExceptionProto", "type": "object", "properties": {"name": {"title": "Name", "type": "string", "default": ""}, "args": {"title": "Args", "type": "array", "items": {"type": "string"}, "default": []}, "stacks": {"title": "Stacks", "type": "array", "items": {"type": "string"}, "default": []}, "executor": {"title": "Executor", "type": "string", "default": ""}}}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "HeaderProto": {"title": "HeaderProto", "type": "object", "properties": {"requestId": {"title": "Requestid", "type": "string", "default": ""}, "status": {"$ref": "#/components/schemas/StatusProto"}, "execEndpoint": {"title": "Execendpoint", "type": "string", "default": ""}, "targetExecutor": {"title": "Targetexecutor", "type": "string", "default": ""}, "timeout": {"title": "Timeout", "type": "integer", "default": 0}}}, "JinaEndpointRequestModel": {"title": "JinaEndpointRequestModel", "required": ["execEndpoint"], "type": "object", "properties": {"data": {"title": "Data", "anyOf": [{"type": "array", "items": {"$ref": "#/components/schemas/PydanticDocument"}}, {"type": "object", "additionalProperties": {"type": "array", "items": {"$ref": "#/components/schemas/PydanticDocument"}}}], "description": "Data to send, a list of dict/string/bytes that can be converted into a list of `Document` objects", "example": [{"id": "ed5a7d298e5111ec86edf398b022c372", "mime_type": "text/plain", "text": "hello, world!"}]}, "targetExecutor": {"title": "Targetexecutor", "type": "string", "description": "A regex string represent the certain pods/deployments request targeted.", "example": ""}, "parameters": {"title": "Parameters", "type": "object", "description": "A dictionary of parameters to be sent to the executor.", "example": {}}, "execEndpoint": {"title": "Execendpoint", "type": "string", "description": "The endpoint string, by convention starts with `/`. All executors bind with `@requests(on=\"/foo\")` will receive this request.", "example": "/foo"}}, "description": "Jina HTTP request model that allows customized endpoint."}, "JinaRequestModel": {"title": "JinaRequestModel", "type": "object", "properties": {"data": {"title": "Data", "anyOf": [{"type": "array", "items": {"$ref": "#/components/schemas/PydanticDocument"}}, {"type": "object", "additionalProperties": {"type": "array", "items": {"$ref": "#/components/schemas/PydanticDocument"}}}], "description": "Data to send, a list of dict/string/bytes that can be converted into a list of `Document` objects", "example": [{"id": "ed5a7d298e5111ec86edf398b022c372", "mime_type": "text/plain", "text": "hello, world!"}]}, "targetExecutor": {"title": "Targetexecutor", "type": "string", "description": "A regex string represent the certain pods/deployments request targeted.", "example": ""}, "parameters": {"title": "Parameters", "type": "object", "description": "A dictionary of parameters to be sent to the executor.", "example": {}}}, "description": "Jina HTTP request model."}, "JinaResponseModel": {"title": "JinaResponseModel", "type": "object", "properties": {"header": {"$ref": "#/components/schemas/HeaderProto"}, "parameters": {"title": "Parameters", "type": "object"}, "routes": {"title": "Routes", "type": "array", "items": {"$ref": "#/components/schemas/RouteProto"}}, "data": {"title": "Data", "type": "array", "items": {"$ref": "#/components/schemas/PydanticDocument"}}}, "description": "Jina HTTP Response model. Only `request_id` and `data` are preserved."}, "JinaStatusModel": {"title": "JinaStatusModel", "required": ["jina", "envs", "usedMemory"], "type": "object", "properties": {"jina": {"title": "Jina", "type": "object"}, "envs": {"title": "Envs", "type": "object"}, "usedMemory": {"title": "Usedmemory", "type": "string"}}, "description": "Pydantic BaseModel for Jina status, used as the response model in REST app."}, "PydanticDocument": {"title": "PydanticDocument", "type": "object", "properties": {"id": {"title": "Id", "type": "string"}, "parent_id": {"title": "Parent Id", "type": "string"}, "granularity": {"title": "Granularity", "type": "integer"}, "adjacency": {"title": "Adjacency", "type": "integer"}, "blob": {"title": "Blob", "type": "string", "format": "binary"}, "tensor": {"title": "Tensor"}, "mime_type": {"title": "Mime Type", "type": "string"}, "text": {"title": "Text", "type": "string"}, "weight": {"title": "Weight", "type": "number"}, "uri": {"title": "Uri", "type": "string"}, "tags": {"title": "Tags", "type": "object", "additionalProperties": {"anyOf": [{"type": "boolean"}, {"type": "number"}, {"type": "string"}, {"type": "array", "items": {"anyOf": [{"type": "boolean"}, {"type": "number"}, {"type": "string"}]}}, {"type": "object", "additionalProperties": {"anyOf": [{"type": "boolean"}, {"type": "number"}, {"type": "string"}]}}]}}, "offset": {"title": "Offset", "type": "number"}, "location": {"title": "Location", "type": "array", "items": {"type": "number"}}, "embedding": {"title": "Embedding"}, "modality": {"title": "Modality", "type": "string"}, "evaluations": {"title": "Evaluations", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/_NamedScore"}}, "scores": {"title": "Scores", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/_NamedScore"}}, "chunks": {"title": "Chunks", "type": "array", "items": {"$ref": "#/components/schemas/PydanticDocument"}}, "matches": {"title": "Matches", "type": "array", "items": {"$ref": "#/components/schemas/PydanticDocument"}}}}, "RouteProto": {"title": "RouteProto", "type": "object", "properties": {"executor": {"title": "Executor", "type": "string", "default": ""}, "startTime": {"title": "Starttime", "type": "string", "format": "date-time"}, "endTime": {"title": "Endtime", "type": "string", "format": "date-time"}, "status": {"$ref": "#/components/schemas/StatusProto"}}}, "StatusCode": {"title": "StatusCode", "enum": [0, 1, 2, 3, 4, 5, 6], "description": "An enumeration."}, "StatusProto": {"title": "StatusProto", "type": "object", "properties": {"code": {"allOf": [{"$ref": "#/components/schemas/StatusCode"}], "default": 0}, "description": {"title": "Description", "type": "string", "default": ""}, "exception": {"$ref": "#/components/schemas/ExceptionProto"}}}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"type": "string"}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}, "_NamedScore": {"title": "_NamedScore", "type": "object", "properties": {"value": {"title": "Value", "type": "number"}, "op_name": {"title": "Op Name", "type": "string"}, "description": {"title": "Description", "type": "string"}, "ref_id": {"title": "Ref Id", "type": "string"}}}}}, "tags": [{"name": "Debug", "description": "Debugging interface. In production, you should hide them by setting `--no-debug-endpoints` in `Flow`/`Gateway`."}, {"name": "CRUD", "description": "CRUD interface. If your service does not implement those interfaces, you can should hide them by setting `--no-crud-endpoints` in `Flow`/`Gateway`."}], "servers": [{"url": "http://localhost:56999", "description": "Local Jina gateway"}]}