{"openapi": "3.1.0", "info": {"title": "My Jina Service", "description": "This is my awesome service. You can set `title` and `description` in your `Flow` or `Gateway` to customize the title and description.", "version": "3.21.2", "x-logo": {"url": "https://api.jina.ai/logo/logo-product/jina-core/horizontal-layout/colored/Product%20logo_Core_vertical_colorful%402x-margin.png"}}, "paths": {"/dry_run": {"get": {"summary": "Get the readiness of Jina Flow service, sends an empty DocumentArray to the complete Flow to validate connectivity", "description": "Get the health of the complete Flow service.\n.. # noqa: DAR201", "operationId": "_flow_health_dry_run_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StatusProto"}}}}}}}, "/status": {"get": {"tags": ["Debug"], "summary": "Get the status of Jina service", "description": "Get the status of this Jina service.\n\nThis is equivalent to running `jina -vf` from command line.\n\n.. # noqa: DAR201", "operationId": "_status_status_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaInfoModel"}}}}}}}, "/post": {"post": {"summary": "Post", "description": "Post a data request to some endpoint.\n\nThis is equivalent to the following:\n\n    from jina import Flow\n\n    f = Flow().add(...)\n\n    with f:\n        f.post(endpoint, ...)\n\n.. # noqa: DAR201\n.. # noqa: DAR101", "operationId": "post_post_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaEndpointRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/index": {"post": {"tags": ["CRUD"], "summary": "/Index", "description": "Post data requests to the Flow. Executors with `@requests(on=\"/index\")` will respond.", "operationId": "_index_index_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/search": {"post": {"tags": ["CRUD"], "summary": "/Search", "description": "Post data requests to the Flow. Executors with `@requests(on=\"/search\")` will respond.", "operationId": "_search_search_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/delete": {"delete": {"tags": ["CRUD"], "summary": "/Delete", "description": "Post data requests to the Flow. Executors with `@requests(on=\"/delete\")` will respond.", "operationId": "_delete_delete_delete", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/update": {"put": {"tags": ["CRUD"], "summary": "/Update", "description": "Post data requests to the Flow. Executors with `@requests(on=\"/update\")` will respond.", "operationId": "_update_update_put", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaRequestModel"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JinaResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"ExceptionProto": {"properties": {"name": {"type": "string", "title": "Name", "default": ""}, "args": {"items": {"type": "string"}, "type": "array", "title": "Args", "default": []}, "stacks": {"items": {"type": "string"}, "type": "array", "title": "Stacks", "default": []}, "executor": {"type": "string", "title": "Executor", "default": ""}}, "type": "object", "title": "ExceptionProto"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "HeaderProto": {"properties": {"requestId": {"type": "string", "title": "Requestid", "default": ""}, "status": {"$ref": "#/components/schemas/StatusProto"}, "execEndpoint": {"type": "string", "title": "Execendpoint", "default": ""}, "targetExecutor": {"type": "string", "title": "Targetexecutor", "default": ""}, "timeout": {"type": "integer", "title": "Timeout", "default": 0}}, "type": "object", "title": "HeaderProto"}, "JinaEndpointRequestModel": {"properties": {"data": {"anyOf": [{"items": {"$ref": "#/components/schemas/PydanticDocument"}, "type": "array"}, {"additionalProperties": {"items": {"$ref": "#/components/schemas/PydanticDocument"}, "type": "array"}, "type": "object"}], "title": "Data", "description": "Data to send, a list of dict/string/bytes that can be converted into a list of `Document` objects", "example": [{"text": "hello, world!"}, {"uri": "https://docs.jina.ai/_static/logo-light.svg"}]}, "targetExecutor": {"type": "string", "title": "Targetexecutor", "description": "A regex string representing the specific pods/deployments targeted by the request.", "example": ""}, "parameters": {"type": "object", "title": "Parameters", "description": "A dictionary of parameters to be sent to the executor.", "example": {}}, "execEndpoint": {"type": "string", "title": "Execendpoint", "description": "The endpoint string, by convention starts with `/`. If you specify it as `/foo`, then all executors bind with `@requests(on=\"/foo\")` will receive the request.", "default": "/", "example": "/"}}, "type": "object", "title": "JinaEndpointRequestModel", "description": "Jina HTTP request model that allows customized endpoint."}, "JinaInfoModel": {"properties": {"jina": {"type": "object", "title": "Jina"}, "envs": {"type": "object", "title": "Envs"}}, "type": "object", "required": ["jina", "envs"], "title": "JinaInfoModel", "description": "Pydantic BaseModel for Jina status, used as the response model in REST app."}, "JinaRequestModel": {"properties": {"data": {"anyOf": [{"items": {"$ref": "#/components/schemas/PydanticDocument"}, "type": "array"}, {"additionalProperties": {"items": {"$ref": "#/components/schemas/PydanticDocument"}, "type": "array"}, "type": "object"}], "title": "Data", "description": "Data to send, a list of dict/string/bytes that can be converted into a list of `Document` objects", "example": [{"text": "hello, world!"}, {"uri": "https://docs.jina.ai/_static/logo-light.svg"}]}, "targetExecutor": {"type": "string", "title": "Targetexecutor", "description": "A regex string representing the specific pods/deployments targeted by the request.", "example": ""}, "parameters": {"type": "object", "title": "Parameters", "description": "A dictionary of parameters to be sent to the executor.", "example": {}}}, "type": "object", "title": "JinaRequestModel", "description": "Jina HTTP request model."}, "JinaResponseModel": {"properties": {"header": {"$ref": "#/components/schemas/HeaderProto"}, "parameters": {"type": "object", "title": "Parameters"}, "routes": {"items": {"$ref": "#/components/schemas/RouteProto"}, "type": "array", "title": "Routes"}, "data": {"items": {"$ref": "#/components/schemas/PydanticDocument"}, "type": "array", "title": "Data"}}, "type": "object", "title": "JinaResponseModel", "description": "Jina HTTP Response model. Only `request_id` and `data` are preserved."}, "PydanticDocument": {"properties": {"id": {"type": "string", "title": "Id"}, "parent_id": {"type": "string", "title": "Parent Id"}, "granularity": {"type": "integer", "title": "Granularity"}, "adjacency": {"type": "integer", "title": "Adjacency"}, "blob": {"type": "string", "title": "Blob"}, "tensor": {"title": "Tensor"}, "mime_type": {"type": "string", "title": "Mime Type"}, "text": {"type": "string", "title": "Text"}, "weight": {"type": "number", "title": "Weight"}, "uri": {"type": "string", "title": "Uri"}, "tags": {"additionalProperties": {"anyOf": [{"type": "boolean"}, {"type": "number"}, {"type": "string"}, {"items": {}, "type": "array"}, {"type": "object"}, {"items": {"anyOf": [{"type": "boolean"}, {"type": "number"}, {"type": "string"}, {"items": {}, "type": "array"}, {"type": "object"}]}, "type": "array"}, {"additionalProperties": {"anyOf": [{"type": "boolean"}, {"type": "number"}, {"type": "string"}, {"items": {}, "type": "array"}, {"type": "object"}]}, "type": "object"}]}, "type": "object", "title": "Tags"}, "offset": {"type": "number", "title": "Offset"}, "location": {"items": {"type": "number"}, "type": "array", "title": "Location"}, "embedding": {"title": "Embedding"}, "modality": {"type": "string", "title": "Modality"}, "evaluations": {"additionalProperties": {"$ref": "#/components/schemas/_NamedScore"}, "type": "object", "title": "Evaluations"}, "scores": {"additionalProperties": {"$ref": "#/components/schemas/_NamedScore"}, "type": "object", "title": "Scores"}, "chunks": {"items": {"$ref": "#/components/schemas/PydanticDocument"}, "type": "array", "title": "Chunks"}, "matches": {"items": {"$ref": "#/components/schemas/PydanticDocument"}, "type": "array", "title": "Matches"}}, "type": "object", "title": "PydanticDocument"}, "RouteProto": {"properties": {"executor": {"type": "string", "title": "Executor", "default": ""}, "startTime": {"type": "string", "format": "date-time", "title": "Starttime"}, "endTime": {"type": "string", "format": "date-time", "title": "Endtime"}, "status": {"$ref": "#/components/schemas/StatusProto"}}, "type": "object", "title": "RouteProto"}, "StatusCode": {"enum": [0, 1], "title": "StatusCode", "description": "An enumeration."}, "StatusProto": {"properties": {"code": {"allOf": [{"$ref": "#/components/schemas/StatusCode"}], "default": 0}, "description": {"type": "string", "title": "Description", "default": ""}, "exception": {"$ref": "#/components/schemas/ExceptionProto"}}, "type": "object", "title": "StatusProto"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}, "_NamedScore": {"properties": {"value": {"type": "number", "title": "Value"}, "op_name": {"type": "string", "title": "Op Name"}, "description": {"type": "string", "title": "Description"}, "ref_id": {"type": "string", "title": "Ref Id"}}, "type": "object", "title": "_NamedScore"}}}, "tags": [{"name": "Debug", "description": "Debugging interface. In production, you should hide them by setting `--no-debug-endpoints` in `Flow`/`Gateway`."}, {"name": "CRUD", "description": "CRUD interface. If your service does not implement those interfaces, you can should hide them by setting `--no-crud-endpoints` in `Flow`/`Gateway`."}], "servers": [{"url": "http://localhost:[64360]", "description": "Local Jina gateway"}]}