{"openapi": "3.0.2", "info": {"title": "JinaD (Daemon)", "description": "REST interface for managing distributed Jina", "version": "2.6.4", "x-logo": {"url": "https://api.jina.ai/logo/logo-product/jina-core/horizontal-layout/colored/Product%20logo_Core_vertical_colorful%402x-margin.png"}}, "paths": {"/": {"get": {"tags": ["daemon"], "summary": " Home", "description": "The instruction HTML when user visits `/` directly\n\n\n.. #noqa: DAR201", "operationId": "_home__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/status": {"get": {"tags": ["daemon"], "summary": "Get the status of the daemon", "operationId": "_status_status_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DaemonStatus"}}}}}}}, "/logs/{log_id}": {"get": {"tags": ["logs"], "summary": " Export Logs", "operationId": "_export_logs_logs__log_id__get", "parameters": [{"required": true, "schema": {"title": "Log Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "log_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/peas": {"get": {"tags": ["peas"], "summary": "Get all alive Pea' status", "operationId": "_get_items_peas_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContainerStoreStatus"}}}}}}, "post": {"tags": ["peas"], "summary": "Create a Pea", "description": "Create a Pea and add it to the store", "operationId": "_create_peas_post", "parameters": [{"required": true, "schema": {"title": "Workspace Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "workspace_id", "in": "query"}, {"required": false, "schema": {"title": "Envs", "type": "array", "items": {"type": "string"}, "default": []}, "name": "envs", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PeaModel"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response  Create Peas Post", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["peas"], "summary": "Terminate all running Peas", "operationId": "_clear_all_peas_delete", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/peas/arguments": {"get": {"tags": ["peas"], "summary": "Get all accepted arguments of a Pea", "operationId": "_fetch_pea_params_peas_arguments_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/peas/{id}": {"get": {"tags": ["peas"], "summary": "Get status of a running Pea", "operationId": "_status_peas__id__get", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContainerItem"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["peas"], "summary": "Terminate a running Pea", "description": "Terminate a running Pea and release its resources", "operationId": "_delete_peas__id__delete", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}, {"required": false, "schema": {"title": "Workspace", "type": "boolean", "default": false}, "name": "workspace", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/pods": {"get": {"tags": ["pods"], "summary": "Get all alive Pods' status", "operationId": "_get_items_pods_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContainerStoreStatus"}}}}}}, "post": {"tags": ["pods"], "summary": "Create a Pod", "description": "Create a Pod and add it to the store", "operationId": "_create_pods_post", "parameters": [{"required": true, "schema": {"title": "Workspace Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "workspace_id", "in": "query"}, {"required": false, "schema": {"title": "Envs", "type": "array", "items": {"type": "string"}, "default": []}, "name": "envs", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PodModel"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response  Create Pods Post", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["pods"], "summary": "Terminate all running Pods", "operationId": "_clear_all_pods_delete", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/pods/arguments": {"get": {"tags": ["pods"], "summary": "Get all accepted arguments of a Pod", "operationId": "_fetch_pod_params_pods_arguments_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/pods/rolling_update/{id}": {"put": {"tags": ["pods"], "summary": "Trigger a rolling_update operation on the Pod object", "operationId": "_rolling_update_pods_rolling_update__id__put", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}, {"required": false, "schema": {"title": "Dump Path", "type": "string"}, "name": "dump_path", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Uses With", "type": "object"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/pods/scale/{id}": {"put": {"tags": ["pods"], "summary": "Trigger a scale operation on the Pod object", "operationId": "_scale_pods_scale__id__put", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}, {"required": true, "schema": {"title": "Replicas", "type": "integer"}, "name": "replicas", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/pods/{id}": {"get": {"tags": ["pods"], "summary": "Get status of a running Pod", "operationId": "_status_pods__id__get", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContainerItem"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["pods"], "summary": "Terminate a running Pod", "description": "Terminate a running Pod and release its resources", "operationId": "_delete_pods__id__delete", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}, {"required": false, "schema": {"title": "Workspace", "type": "boolean", "default": false}, "name": "workspace", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/flows": {"get": {"tags": ["flows"], "summary": "Get all alive Flows' status", "operationId": "_get_items_flows_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContainerStoreStatus"}}}}}}, "post": {"tags": ["flows"], "summary": "Create a Flow from a YAML config", "operationId": "_create_flows_post", "parameters": [{"required": true, "schema": {"title": "Workspace Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "workspace_id", "in": "query"}, {"required": true, "schema": {"title": "Filename", "type": "string"}, "name": "filename", "in": "query"}, {"required": false, "schema": {"title": "Envs", "type": "array", "items": {"type": "string"}, "default": []}, "name": "envs", "in": "query"}], "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response  Create Flows Post", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["flows"], "summary": "Terminate all running Flows", "operationId": "_clear_all_flows_delete", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/flows/arguments": {"get": {"tags": ["flows"], "summary": "Get all accepted arguments of a Flow", "operationId": "_fetch_flow_params_flows_arguments_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/flows/rolling_update/{id}": {"put": {"tags": ["flows"], "summary": "Trigger a rolling_update operation on the Flow object", "operationId": "_rolling_update_flows_rolling_update__id__put", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}, {"required": true, "schema": {"title": "Pod Name", "type": "string"}, "name": "pod_name", "in": "query"}, {"required": false, "schema": {"title": "Dump Path", "type": "string"}, "name": "dump_path", "in": "query"}], "requestBody": {"content": {"application/json": {"schema": {"title": "Uses With", "type": "object"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/flows/scale/{id}": {"put": {"tags": ["flows"], "summary": "Trigger a scale operation on the Flow object", "operationId": "_scale_flows_scale__id__put", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}, {"required": true, "schema": {"title": "Pod Name", "type": "string"}, "name": "pod_name", "in": "query"}, {"required": true, "schema": {"title": "Replicas", "type": "integer"}, "name": "replicas", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/flows/{id}": {"get": {"tags": ["flows"], "summary": "Get the status of a running Flow", "operationId": "_status_flows__id__get", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContainerItem"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["flows"], "summary": "Terminate a running Flow", "description": "Terminate a running Flow and release its resources", "operationId": "_delete_flows__id__delete", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/workspaces": {"get": {"tags": ["workspaces"], "summary": "Get all existing Workspaces' status", "operationId": "_get_items_workspaces_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkspaceStoreStatus"}}}}}}, "post": {"tags": ["workspaces"], "summary": "Create a workspace & upload files", "description": "Return a DaemonID to the workspace, which can be used later when create Pea/Pod/Flow", "operationId": "_create_workspaces_post", "parameters": [{"required": false, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "query"}], "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body__create_workspaces_post"}}}}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["workspaces"], "summary": "Deleting all Workspaces", "operationId": "_clear_all_workspaces_delete", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/workspaces/{id}": {"get": {"tags": ["workspaces"], "summary": "Get the status of an existing Workspace", "operationId": "_list_workspaces__id__get", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/WorkspaceItem"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "put": {"tags": ["workspaces"], "summary": "Update files in a workspace", "description": "Return a DaemonID to the workspace, which can be used later when create Pea/Pod/Flow", "operationId": "_update_workspaces__id__put", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}], "requestBody": {"content": {"multipart/form-data": {"schema": {"$ref": "#/components/schemas/Body__update_workspaces__id__put"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["workspaces"], "summary": "Deleting an existing Workspace", "operationId": "_delete_workspaces__id__delete", "parameters": [{"required": true, "schema": {"title": "Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}, "name": "id", "in": "path"}, {"required": false, "schema": {"title": "Container", "type": "boolean", "default": true}, "name": "container", "in": "query"}, {"required": false, "schema": {"title": "Network", "type": "boolean", "default": true}, "name": "network", "in": "query"}, {"required": false, "schema": {"title": "Files", "type": "boolean", "default": true}, "name": "files", "in": "query"}, {"required": false, "schema": {"title": "Everything", "type": "boolean", "default": false}, "name": "everything", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"Body__create_workspaces_post": {"title": "Body__create_workspaces_post", "type": "object", "properties": {"files": {"title": "Files", "type": "array", "items": {"type": "string", "format": "binary"}}}}, "Body__update_workspaces__id__put": {"title": "Body__update_workspaces__id__put", "type": "object", "properties": {"files": {"title": "Files", "type": "array", "items": {"type": "string", "format": "binary"}}}}, "ContainerArguments": {"title": "ContainerArguments", "required": ["object", "entrypoint"], "type": "object", "properties": {"object": {"title": "Object", "type": "object"}, "entrypoint": {"title": "Entrypoint", "type": "string"}}, "description": "Pydantic model for ContainerArguments"}, "ContainerItem": {"title": "ContainerItem", "required": ["metadata", "arguments", "workspace_id"], "type": "object", "properties": {"time_created": {"title": "Time Created", "type": "string", "format": "date-time"}, "metadata": {"$ref": "#/components/schemas/ContainerMetadata"}, "arguments": {"$ref": "#/components/schemas/ContainerArguments"}, "workspace_id": {"title": "Workspace Id", "pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}}, "description": "Pydantic model for ContainerItem"}, "ContainerMetadata": {"title": "ContainerMetadata", "required": ["container_id", "container_name", "image_id", "network", "ports", "uri"], "type": "object", "properties": {"container_id": {"title": "Container Id", "type": "string"}, "container_name": {"title": "Container Name", "type": "string"}, "image_id": {"title": "Image Id", "type": "string"}, "network": {"title": "Network", "type": "string"}, "ports": {"title": "Ports", "type": "object"}, "uri": {"title": "Uri", "type": "string"}}, "description": "Pydantic model for ContainerMetadata"}, "ContainerStoreStatus": {"title": "ContainerStoreStatus", "type": "object", "properties": {"time_created": {"title": "Time Created", "type": "string", "format": "date-time"}, "time_updated": {"title": "Time Updated", "type": "string", "format": "date-time"}, "num_add": {"title": "Num Add", "type": "integer", "default": 0}, "num_del": {"title": "Num Del", "type": "integer", "default": 0}, "items": {"title": "Items", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/ContainerItem"}}}, "description": "Pydantic model for ContainerStoreStatus"}, "DaemonStatus": {"title": "DaemonStatus", "required": ["jina", "envs", "workspaces", "peas", "pods", "flows", "used_memory"], "type": "object", "properties": {"jina": {"title": "Jina", "type": "object"}, "envs": {"title": "Envs", "type": "object"}, "workspaces": {"$ref": "#/components/schemas/WorkspaceStoreStatus"}, "peas": {"$ref": "#/components/schemas/ContainerStoreStatus"}, "pods": {"$ref": "#/components/schemas/ContainerStoreStatus"}, "flows": {"$ref": "#/components/schemas/ContainerStoreStatus"}, "used_memory": {"title": "Used Memory", "type": "string"}}, "description": "Pydantic model for DaemonStatus"}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "PeaModel": {"title": "PeaModel", "type": "object", "properties": {"name": {"title": "Name", "type": "string", "description": "\nThe name of this object.\n\nThis will be used in the following places:\n- how you refer to this object in Python/YAML/CLI\n- visualization\n- log message header\n- ...\n\nWhen not given, then the default naming strategy will apply.\n                    "}, "workspace": {"title": "Workspace", "type": "string", "description": "The working directory for any IO operations in this object. If not set, then derive from its parent `workspace`."}, "k8s_namespace": {"title": "K8S Namespace", "type": "string", "description": "==SUPPRESS=="}, "log_config": {"title": "Log Config", "type": "string", "description": "The YAML config of the logger used in this object.", "default": "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml"}, "quiet": {"title": "Quiet", "type": "boolean", "description": "If set, then no log will be emitted from this object.", "default": false}, "quiet_error": {"title": "Quiet Error", "type": "boolean", "description": "If set, then exception stack information will not be added to the log", "default": false}, "identity": {"title": "Identity", "type": "string", "description": "==SUPPRESS==", "example": "75303e07188c4998a24f3e91234e8cc9"}, "workspace_id": {"title": "Workspace Id", "type": "string", "description": "==SUPPRESS==", "example": "d96fb30abc474ceabe35dbff19099767"}, "static_routing_table": {"title": "Static Routing Table", "type": "boolean", "description": "Defines if the routing table should be pre computed by the Flow. In this case it is statically defined for each Pod and not send on every data request. Can not be used in combination with external pods", "default": false}, "routing_table": {"title": "Routing Table", "type": "string", "description": "==SUPPRESS=="}, "dynamic_routing": {"title": "Dynamic Routing", "type": "boolean", "description": "==SUPPRESS==", "default": true}, "extra_search_paths": {"title": "Extra Search Paths", "type": "array", "items": {"type": "string"}, "description": "==SUPPRESS==", "default": []}, "reduce": {"title": "Reduce", "type": "boolean", "description": "If set, DocumentArray matrix will be reduced into one DocumentArray before reaching this pod", "default": false}, "zmq_identity": {"title": "Zmq Identity", "type": "string", "description": "The identity of a ZMQRuntime. It is used for unique socket identification towards other ZMQRuntimes."}, "port_ctrl": {"title": "Port Ctrl", "type": "integer", "description": "The port for controlling the runtime, default a random port between [49152, 65535]", "example": 57361}, "ctrl_with_ipc": {"title": "Ctrl With Ipc", "type": "boolean", "description": "If set, use ipc protocol for control socket", "default": false}, "timeout_ctrl": {"title": "Timeout Ctrl", "type": "integer", "description": "The timeout in milliseconds of the control request, -1 for waiting forever", "default": 5000}, "ssh_server": {"title": "Ssh Server", "type": "string", "description": "The SSH server through which the tunnel will be created, can actually be a fully specified `user@server:port` ssh url."}, "ssh_keyfile": {"title": "Ssh Keyfile", "type": "string", "description": "This specifies a key to be used in ssh login, default None. regular default ssh keys will be used without specifying this argument."}, "ssh_password": {"title": "Ssh Password", "type": "string", "description": "The ssh password to the ssh server."}, "uses": {"title": "Uses", "type": "string", "description": "\n        The config of the executor, it could be one of the followings:\n        * an Executor YAML file (.yml, .yaml, .jaml)\n        * a Jina Hub Executor (must start with `jinahub://` or `jinahub+docker://`)\n        * a docker image (must start with `docker://`)\n        * the string literal of a YAML config (must start with `!` or `jtype: `)\n        * the string literal of a JSON config\n\n        When use it under Python, one can use the following values additionally:\n        - a Python dict that represents the config\n        - a text file stream has `.read()` interface\n        ", "default": "BaseExecutor"}, "uses_with": {"title": "Uses With", "type": "object", "description": "\n    Dictionary of keyword arguments that will override the `with` configuration in `uses`\n    "}, "uses_metas": {"title": "Uses Metas", "type": "object", "description": "\n    Dictionary of keyword arguments that will override the `metas` configuration in `uses`\n    "}, "uses_requests": {"title": "Uses Requests", "type": "object", "description": "\n        Dictionary of keyword arguments that will override the `requests` configuration in `uses`\n        "}, "py_modules": {"title": "Py Modules", "type": "array", "items": {"type": "string"}, "description": "\nThe customized python modules need to be imported before loading the executor\n\nNote that the recommended way is to only import a single module - a simple python file, if your\nexecutor can be defined in a single file, or an ``__init__.py`` file if you have multiple files,\nwhich should be structured as a python package. For more details, please see the\n`Executor cookbook <https://docs.jina.ai/fundamentals/executor/repository-structure/>`__\n"}, "port_in": {"title": "Port In", "type": "integer", "description": "The port for input data, default a random port between [49152, 65535]", "example": 55237}, "port_out": {"title": "Port Out", "type": "integer", "description": "The port for output data, default a random port between [49152, 65535]", "example": 44443}, "hosts_in_connect": {"title": "Hosts In Connect", "type": "array", "items": {"type": "string"}, "description": "The host address for input, by default it is 0.0.0.0"}, "host_in": {"title": "Host In", "type": "string", "description": "The host address for input, by default it is 0.0.0.0", "default": "0.0.0.0"}, "host_out": {"title": "Host Out", "type": "string", "description": "The host address for output, by default it is 0.0.0.0", "default": "0.0.0.0"}, "socket_in": {"title": "Socket In", "type": "string", "description": "The socket type for input port", "default": "PULL_BIND"}, "socket_out": {"title": "Socket Out", "type": "string", "description": "The socket type for output port", "default": "PUSH_BIND"}, "memory_hwm": {"title": "Memory Hwm", "type": "integer", "description": "The memory high watermark of this pod in Gigabytes, pod will restart when this is reached. -1 means no restriction", "default": -1}, "on_error_strategy": {"title": "On Error Strategy", "type": "string", "description": "\nThe skip strategy on exceptions.\n\n- IGNORE: Ignore it, keep running all Executors in the sequel flow\n- SKIP_HANDLE: Skip all Executors in the sequel, only `pre_hook` and `post_hook` are called\n- THROW_EARLY: Immediately throw the exception, the sequel flow will not be running at all\n\nNote, `IGNORE`, `SKIP_EXECUTOR` and `SKIP_HANDLE` do not guarantee the success execution in the sequel flow. If something\nis wrong in the upstream, it is hard to carry this exception and moving forward without any side-effect.\n", "default": "IGNORE"}, "native": {"title": "Native", "type": "boolean", "description": "If set, only native Executors is allowed, and the Executor is always run inside ZEDRuntime.", "default": false}, "num_part": {"title": "Num Part", "type": "integer", "description": "==SUPPRESS==", "default": 0}, "dynamic_routing_out": {"title": "Dynamic Routing Out", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "dynamic_routing_in": {"title": "Dynamic Routing In", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "grpc_data_requests": {"title": "Grpc Data Requests", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "runs_in_docker": {"title": "Runs In Docker", "type": "boolean", "description": "Informs a Pea that runs in a container. Important to properly set networking information", "default": false}, "dump_path": {"title": "Dump Path", "type": "string", "description": "==SUPPRESS==", "default": ""}, "entrypoint": {"title": "Entrypoint", "type": "string", "description": "The entrypoint command overrides the ENTRYPOINT in Docker image. when not set then the Docker image ENTRYPOINT takes effective."}, "docker_kwargs": {"title": "Docker Kwargs", "type": "object", "description": "\nDictionary of kwargs arguments that will be passed to Docker SDK when starting the docker '\ncontainer. \n\nMore details can be found in the Docker SDK docs:  https://docker-py.readthedocs.io/en/stable/\n\n"}, "pull_latest": {"title": "Pull Latest", "type": "boolean", "description": "Pull the latest image before running", "default": false}, "volumes": {"title": "Volumes", "type": "array", "items": {"type": "string"}, "description": "\nThe path on the host to be mounted inside the container. \n\nNote, \n- If separated by `:`, then the first part will be considered as the local host path and the second part is the path in the container system. \n- If no split provided, then the basename of that directory will be mounted into container's root path, e.g. `--volumes=\"/user/test/my-workspace\"` will be mounted into `/my-workspace` inside the container. \n- All volumes are mounted with read-write mode.\n"}, "gpus": {"title": "Gpus", "type": "string", "description": "\n    This argument allows dockerized Jina executor discover local gpu devices.\n\n    Note, \n    - To access all gpus, use `--gpus all`.\n    - To access multiple gpus, e.g. make use of 2 gpus, use `--gpus 2`.\n    - To access specified gpus based on device id, use `--gpus device=[YOUR-GPU-DEVICE-ID]`\n    - To access specified gpus based on multiple device id, use `--gpus device=[YOUR-GPU-DEVICE-ID1],device=[YOUR-GPU-DEVICE-ID2]`\n    - To specify more parameters, use `--gpus device=[YOUR-GPU-DEVICE-ID],runtime=nvidia,capabilities=display\n    "}, "host": {"title": "Host", "type": "string", "description": "The host address of the runtime, by default it is 0.0.0.0.", "default": "0.0.0.0"}, "port_jinad": {"title": "Port Jinad", "type": "integer", "description": "The port of the remote machine for usage with JinaD.", "default": 8000}, "quiet_remote_logs": {"title": "Quiet Remote Logs", "type": "boolean", "description": "Do not display the streaming of remote logs on local console", "default": false}, "upload_files": {"title": "Upload Files", "type": "array", "items": {"type": "string"}, "description": "\nThe files on the host to be uploaded to the remote\nworkspace. This can be useful when your Pod has more\nfile dependencies beyond a single YAML file, e.g.\nPython files, data files.\n\nNote,\n- currently only flatten structure is supported, which means if you upload `[./foo/a.py, ./foo/b.pp, ./bar/c.yml]`, then they will be put under the _same_ workspace on the remote, losing all hierarchies.\n- by default, `--uses` YAML file is always uploaded.\n- uploaded files are by default isolated across the runs. To ensure files are submitted to the same workspace across different runs, use `--workspace-id` to specify the workspace.\n"}, "disable_remote": {"title": "Disable Remote", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "daemon": {"title": "Daemon", "type": "boolean", "description": "The Pea attempts to terminate all of its Runtime child processes/threads on existing. setting it to true basically tell the Pea do not wait on the Runtime when closing", "default": false}, "runtime_backend": {"title": "Runtime Backend", "type": "string", "description": "The parallel backend of the runtime inside the Pea", "default": "PROCESS"}, "runtime_cls": {"title": "Runtime Cls", "type": "string", "description": "The runtime class to run inside the Pea", "default": "ZEDRuntime"}, "timeout_ready": {"title": "Timeout Ready", "type": "integer", "description": "The timeout in milliseconds of a Pea waits for the runtime to be ready, -1 for waiting forever", "default": 600000}, "env": {"title": "Env", "type": "object", "description": "The map of environment variables that are available inside runtime"}, "expose_public": {"title": "Expose Public", "type": "boolean", "description": "If set, expose the public IP address to remote when necessary, by default it exposesprivate IP address, which only allows accessing under the same network/subnet. Important to set this to true when the Pea will receive input connections from remote Peas", "default": false}, "shard_id": {"title": "Shard Id", "type": "integer", "description": "==SUPPRESS==", "default": 0}, "replica_id": {"title": "Replica Id", "type": "integer", "description": "==SUPPRESS==", "default": 0}, "pea_role": {"title": "Pea Role", "type": "string", "description": "==SUPPRESS==", "default": "SINGLETON"}, "noblock_on_start": {"title": "Noblock On Start", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "shards": {"title": "Shards", "type": "integer", "description": "The number of shards in the pod running at the same time, `port_in` and `port_out` will be set to random, and routers will be added automatically when necessary. For more details check https://docs.jina.ai/fundamentals/flow/topology/", "default": 1}, "replicas": {"title": "Replicas", "type": "integer", "description": "The number of replicas in the pod, `port_in` and `port_out` will be set to random, and routers will be added automatically when necessary", "default": 1}, "install_requirements": {"title": "Install Requirements", "type": "boolean", "description": "If set, install `requirements.txt` in the Hub Executor bundle to local", "default": false}, "force_update": {"title": "Force Update", "type": "boolean", "description": "If set, always pull the latest Hub Executor bundle even it exists on local", "default": false}}}, "PodModel": {"title": "PodModel", "type": "object", "properties": {"name": {"title": "Name", "type": "string", "description": "\nThe name of this object.\n\nThis will be used in the following places:\n- how you refer to this object in Python/YAML/CLI\n- visualization\n- log message header\n- ...\n\nWhen not given, then the default naming strategy will apply.\n                    "}, "workspace": {"title": "Workspace", "type": "string", "description": "The working directory for any IO operations in this object. If not set, then derive from its parent `workspace`."}, "k8s_namespace": {"title": "K8S Namespace", "type": "string", "description": "==SUPPRESS=="}, "log_config": {"title": "Log Config", "type": "string", "description": "The YAML config of the logger used in this object.", "default": "/opt/hostedtoolcache/Python/3.7.12/x64/lib/python3.7/site-packages/jina/resources/logging.default.yml"}, "quiet": {"title": "Quiet", "type": "boolean", "description": "If set, then no log will be emitted from this object.", "default": false}, "quiet_error": {"title": "Quiet Error", "type": "boolean", "description": "If set, then exception stack information will not be added to the log", "default": false}, "identity": {"title": "Identity", "type": "string", "description": "==SUPPRESS==", "example": "7d10ad37bc3f48a3b63fae21078b97ac"}, "workspace_id": {"title": "Workspace Id", "type": "string", "description": "==SUPPRESS==", "example": "c64ec38351a2417b83cd3d455bfc8ef3"}, "static_routing_table": {"title": "Static Routing Table", "type": "boolean", "description": "Defines if the routing table should be pre computed by the Flow. In this case it is statically defined for each Pod and not send on every data request. Can not be used in combination with external pods", "default": false}, "routing_table": {"title": "Routing Table", "type": "string", "description": "==SUPPRESS=="}, "dynamic_routing": {"title": "Dynamic Routing", "type": "boolean", "description": "==SUPPRESS==", "default": true}, "extra_search_paths": {"title": "Extra Search Paths", "type": "array", "items": {"type": "string"}, "description": "==SUPPRESS==", "default": []}, "reduce": {"title": "Reduce", "type": "boolean", "description": "If set, DocumentArray matrix will be reduced into one DocumentArray before reaching this pod", "default": false}, "zmq_identity": {"title": "Zmq Identity", "type": "string", "description": "The identity of a ZMQRuntime. It is used for unique socket identification towards other ZMQRuntimes."}, "port_ctrl": {"title": "Port Ctrl", "type": "integer", "description": "The port for controlling the runtime, default a random port between [49152, 65535]", "example": 35817}, "ctrl_with_ipc": {"title": "Ctrl With Ipc", "type": "boolean", "description": "If set, use ipc protocol for control socket", "default": false}, "timeout_ctrl": {"title": "Timeout Ctrl", "type": "integer", "description": "The timeout in milliseconds of the control request, -1 for waiting forever", "default": 5000}, "ssh_server": {"title": "Ssh Server", "type": "string", "description": "The SSH server through which the tunnel will be created, can actually be a fully specified `user@server:port` ssh url."}, "ssh_keyfile": {"title": "Ssh Keyfile", "type": "string", "description": "This specifies a key to be used in ssh login, default None. regular default ssh keys will be used without specifying this argument."}, "ssh_password": {"title": "Ssh Password", "type": "string", "description": "The ssh password to the ssh server."}, "uses": {"title": "Uses", "type": "string", "description": "\n        The config of the executor, it could be one of the followings:\n        * an Executor YAML file (.yml, .yaml, .jaml)\n        * a Jina Hub Executor (must start with `jinahub://` or `jinahub+docker://`)\n        * a docker image (must start with `docker://`)\n        * the string literal of a YAML config (must start with `!` or `jtype: `)\n        * the string literal of a JSON config\n\n        When use it under Python, one can use the following values additionally:\n        - a Python dict that represents the config\n        - a text file stream has `.read()` interface\n        ", "default": "BaseExecutor"}, "uses_with": {"title": "Uses With", "type": "object", "description": "\n    Dictionary of keyword arguments that will override the `with` configuration in `uses`\n    "}, "uses_metas": {"title": "Uses Metas", "type": "object", "description": "\n    Dictionary of keyword arguments that will override the `metas` configuration in `uses`\n    "}, "uses_requests": {"title": "Uses Requests", "type": "object", "description": "\n        Dictionary of keyword arguments that will override the `requests` configuration in `uses`\n        "}, "py_modules": {"title": "Py Modules", "type": "array", "items": {"type": "string"}, "description": "\nThe customized python modules need to be imported before loading the executor\n\nNote that the recommended way is to only import a single module - a simple python file, if your\nexecutor can be defined in a single file, or an ``__init__.py`` file if you have multiple files,\nwhich should be structured as a python package. For more details, please see the\n`Executor cookbook <https://docs.jina.ai/fundamentals/executor/repository-structure/>`__\n"}, "port_in": {"title": "Port In", "type": "integer", "description": "The port for input data, default a random port between [49152, 65535]", "example": 32941}, "port_out": {"title": "Port Out", "type": "integer", "description": "The port for output data, default a random port between [49152, 65535]", "example": 46071}, "hosts_in_connect": {"title": "Hosts In Connect", "type": "array", "items": {"type": "string"}, "description": "The host address for input, by default it is 0.0.0.0"}, "host_in": {"title": "Host In", "type": "string", "description": "The host address for input, by default it is 0.0.0.0", "default": "0.0.0.0"}, "host_out": {"title": "Host Out", "type": "string", "description": "The host address for output, by default it is 0.0.0.0", "default": "0.0.0.0"}, "socket_in": {"title": "Socket In", "type": "string", "description": "The socket type for input port", "default": "PULL_BIND"}, "socket_out": {"title": "Socket Out", "type": "string", "description": "The socket type for output port", "default": "PUSH_BIND"}, "memory_hwm": {"title": "Memory Hwm", "type": "integer", "description": "The memory high watermark of this pod in Gigabytes, pod will restart when this is reached. -1 means no restriction", "default": -1}, "on_error_strategy": {"title": "On Error Strategy", "type": "string", "description": "\nThe skip strategy on exceptions.\n\n- IGNORE: Ignore it, keep running all Executors in the sequel flow\n- SKIP_HANDLE: Skip all Executors in the sequel, only `pre_hook` and `post_hook` are called\n- THROW_EARLY: Immediately throw the exception, the sequel flow will not be running at all\n\nNote, `IGNORE`, `SKIP_EXECUTOR` and `SKIP_HANDLE` do not guarantee the success execution in the sequel flow. If something\nis wrong in the upstream, it is hard to carry this exception and moving forward without any side-effect.\n", "default": "IGNORE"}, "native": {"title": "Native", "type": "boolean", "description": "If set, only native Executors is allowed, and the Executor is always run inside ZEDRuntime.", "default": false}, "num_part": {"title": "Num Part", "type": "integer", "description": "==SUPPRESS==", "default": 0}, "dynamic_routing_out": {"title": "Dynamic Routing Out", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "dynamic_routing_in": {"title": "Dynamic Routing In", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "grpc_data_requests": {"title": "Grpc Data Requests", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "runs_in_docker": {"title": "Runs In Docker", "type": "boolean", "description": "Informs a Pea that runs in a container. Important to properly set networking information", "default": false}, "dump_path": {"title": "Dump Path", "type": "string", "description": "==SUPPRESS==", "default": ""}, "entrypoint": {"title": "Entrypoint", "type": "string", "description": "The entrypoint command overrides the ENTRYPOINT in Docker image. when not set then the Docker image ENTRYPOINT takes effective."}, "docker_kwargs": {"title": "Docker Kwargs", "type": "object", "description": "\nDictionary of kwargs arguments that will be passed to Docker SDK when starting the docker '\ncontainer. \n\nMore details can be found in the Docker SDK docs:  https://docker-py.readthedocs.io/en/stable/\n\n"}, "pull_latest": {"title": "Pull Latest", "type": "boolean", "description": "Pull the latest image before running", "default": false}, "volumes": {"title": "Volumes", "type": "array", "items": {"type": "string"}, "description": "\nThe path on the host to be mounted inside the container. \n\nNote, \n- If separated by `:`, then the first part will be considered as the local host path and the second part is the path in the container system. \n- If no split provided, then the basename of that directory will be mounted into container's root path, e.g. `--volumes=\"/user/test/my-workspace\"` will be mounted into `/my-workspace` inside the container. \n- All volumes are mounted with read-write mode.\n"}, "gpus": {"title": "Gpus", "type": "string", "description": "\n    This argument allows dockerized Jina executor discover local gpu devices.\n\n    Note, \n    - To access all gpus, use `--gpus all`.\n    - To access multiple gpus, e.g. make use of 2 gpus, use `--gpus 2`.\n    - To access specified gpus based on device id, use `--gpus device=[YOUR-GPU-DEVICE-ID]`\n    - To access specified gpus based on multiple device id, use `--gpus device=[YOUR-GPU-DEVICE-ID1],device=[YOUR-GPU-DEVICE-ID2]`\n    - To specify more parameters, use `--gpus device=[YOUR-GPU-DEVICE-ID],runtime=nvidia,capabilities=display\n    "}, "host": {"title": "Host", "type": "string", "description": "The host address of the runtime, by default it is 0.0.0.0.", "default": "0.0.0.0"}, "port_jinad": {"title": "Port Jinad", "type": "integer", "description": "The port of the remote machine for usage with JinaD.", "default": 8000}, "quiet_remote_logs": {"title": "Quiet Remote Logs", "type": "boolean", "description": "Do not display the streaming of remote logs on local console", "default": false}, "upload_files": {"title": "Upload Files", "type": "array", "items": {"type": "string"}, "description": "\nThe files on the host to be uploaded to the remote\nworkspace. This can be useful when your Pod has more\nfile dependencies beyond a single YAML file, e.g.\nPython files, data files.\n\nNote,\n- currently only flatten structure is supported, which means if you upload `[./foo/a.py, ./foo/b.pp, ./bar/c.yml]`, then they will be put under the _same_ workspace on the remote, losing all hierarchies.\n- by default, `--uses` YAML file is always uploaded.\n- uploaded files are by default isolated across the runs. To ensure files are submitted to the same workspace across different runs, use `--workspace-id` to specify the workspace.\n"}, "disable_remote": {"title": "Disable Remote", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "daemon": {"title": "Daemon", "type": "boolean", "description": "The Pea attempts to terminate all of its Runtime child processes/threads on existing. setting it to true basically tell the Pea do not wait on the Runtime when closing", "default": false}, "runtime_backend": {"title": "Runtime Backend", "type": "string", "description": "The parallel backend of the runtime inside the Pea", "default": "PROCESS"}, "runtime_cls": {"title": "Runtime Cls", "type": "string", "description": "The runtime class to run inside the Pea", "default": "ZEDRuntime"}, "timeout_ready": {"title": "Timeout Ready", "type": "integer", "description": "The timeout in milliseconds of a Pea waits for the runtime to be ready, -1 for waiting forever", "default": 600000}, "env": {"title": "Env", "type": "object", "description": "The map of environment variables that are available inside runtime"}, "expose_public": {"title": "Expose Public", "type": "boolean", "description": "If set, expose the public IP address to remote when necessary, by default it exposesprivate IP address, which only allows accessing under the same network/subnet. Important to set this to true when the Pea will receive input connections from remote Peas", "default": false}, "shard_id": {"title": "Shard Id", "type": "integer", "description": "==SUPPRESS==", "default": 0}, "replica_id": {"title": "Replica Id", "type": "integer", "description": "==SUPPRESS==", "default": 0}, "pea_role": {"title": "Pea Role", "type": "string", "description": "==SUPPRESS==", "default": "SINGLETON"}, "noblock_on_start": {"title": "Noblock On Start", "type": "boolean", "description": "==SUPPRESS==", "default": false}, "shards": {"title": "Shards", "type": "integer", "description": "The number of shards in the pod running at the same time, `port_in` and `port_out` will be set to random, and routers will be added automatically when necessary. For more details check https://docs.jina.ai/fundamentals/flow/topology/", "default": 1}, "replicas": {"title": "Replicas", "type": "integer", "description": "The number of replicas in the pod, `port_in` and `port_out` will be set to random, and routers will be added automatically when necessary", "default": 1}, "install_requirements": {"title": "Install Requirements", "type": "boolean", "description": "If set, install `requirements.txt` in the Hub Executor bundle to local", "default": false}, "force_update": {"title": "Force Update", "type": "boolean", "description": "If set, always pull the latest Hub Executor bundle even it exists on local", "default": false}, "uses_before": {"title": "Uses Before", "type": "string", "description": "The executor attached after the Peas described by --uses, typically before sending to all shards, accepted type follows `--uses`"}, "uses_after": {"title": "Uses After", "type": "string", "description": "The executor attached after the Peas described by --uses, typically used for receiving from all shards, accepted type follows `--uses`"}, "polling": {"title": "Polling", "type": "string", "description": "\nThe polling strategy of the Pod (when `shards>1`)\n- ANY: only one (whoever is idle) Pea polls the message\n- ALL: all Peas poll the message (like a broadcast)\n", "default": "ANY"}, "scheduling": {"title": "Scheduling", "type": "string", "description": "The strategy of scheduling workload among Peas", "default": "LOAD_BALANCE"}, "external": {"title": "External", "type": "boolean", "description": "The Pod will be considered an external Pod that has been started independently from the Flow.This Pod will not be context managed by the Flow.", "default": false}, "peas_hosts": {"title": "Peas Hosts", "type": "array", "items": {"type": "string"}, "description": "The hosts of the peas when shards greater than 1.\n        Peas will be evenly distributed among the hosts. By default,\n        peas are running on host provided by the argument ``host``"}, "pod_role": {"title": "Pod Role", "type": "string", "description": "==SUPPRESS=="}, "connect_to_predecessor": {"title": "Connect To Predecessor", "type": "boolean", "description": "The head Pea of this Pod will connect to the TailPea of the predecessor Pod.", "default": false}, "k8s_uses_init": {"title": "K8S Uses Init", "type": "string", "description": "==SUPPRESS=="}, "k8s_mount_path": {"title": "K8S Mount Path", "type": "string", "description": "==SUPPRESS=="}, "k8s_init_container_command": {"title": "K8S Init Container Command", "type": "array", "items": {"type": "string"}, "description": "==SUPPRESS=="}, "k8s_custom_resource_dir": {"title": "K8S Custom Resource Dir", "type": "string", "description": "==SUPPRESS=="}}}, "RemoteWorkspaceState": {"title": "RemoteWorkspaceState", "enum": ["PENDING", "CREATING", "UPDATING", "ACTIVE", "FAILED", "DELETING"], "type": "string", "description": "Enum representing state of remote workspace created by JinaD"}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"type": "string"}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}, "WorkspaceArguments": {"title": "WorkspaceArguments", "required": ["files", "jinad", "requirements"], "type": "object", "properties": {"files": {"title": "Files", "type": "array", "items": {"type": "string"}}, "jinad": {"title": "Jinad", "type": "object", "additionalProperties": {"type": "string"}}, "requirements": {"title": "Requirements", "type": "string"}}, "description": "Pydantic model for WorkspaceArguments"}, "WorkspaceItem": {"title": "WorkspaceItem", "required": ["state"], "type": "object", "properties": {"time_created": {"title": "Time Created", "type": "string", "format": "date-time"}, "state": {"$ref": "#/components/schemas/RemoteWorkspaceState"}, "metadata": {"$ref": "#/components/schemas/WorkspaceMetadata"}, "arguments": {"$ref": "#/components/schemas/WorkspaceArguments"}}, "description": "Pydantic model for WorkspaceItem"}, "WorkspaceMetadata": {"title": "WorkspaceMetadata", "required": ["image_id", "image_name", "network", "workdir"], "type": "object", "properties": {"image_id": {"title": "Image Id", "type": "string"}, "image_name": {"title": "Image Name", "type": "string"}, "network": {"title": "Network", "type": "string"}, "workdir": {"title": "Workdir", "type": "string"}, "container_id": {"title": "Container Id", "type": "string"}, "managed_objects": {"title": "Managed Objects", "uniqueItems": true, "type": "array", "items": {"pattern": "^(jpod|jpea|jflow|jnetwork|jworkspace)-[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$", "type": "string"}}}, "description": "Pydantic model for WorkspaceMetadata"}, "WorkspaceStoreStatus": {"title": "WorkspaceStoreStatus", "type": "object", "properties": {"time_created": {"title": "Time Created", "type": "string", "format": "date-time"}, "time_updated": {"title": "Time Updated", "type": "string", "format": "date-time"}, "num_add": {"title": "Num Add", "type": "integer", "default": 0}, "num_del": {"title": "Num Del", "type": "integer", "default": 0}, "items": {"title": "Items", "type": "object", "additionalProperties": {"$ref": "#/components/schemas/WorkspaceItem"}}, "ip_range_start": {"title": "Ip Range Start", "type": "string", "format": "ipv4", "default": "10.0.0.0"}, "subnet_size": {"title": "Subnet Size", "type": "integer", "default": 22}, "ip_range_current_offset": {"title": "Ip Range Current Offset", "type": "integer", "default": 0}}, "description": "Pydantic model for WorkspaceStoreStatus"}}}, "tags": [{"name": "daemon", "description": "API to manage the Daemon"}, {"name": "flows", "description": "API to manage Flows"}, {"name": "pods", "description": "API to manage Pods"}, {"name": "peas", "description": "API to manage Peas"}, {"name": "logs", "description": "API to stream Logs"}, {"name": "workspaces", "description": "API to manage Workspaces"}], "servers": [{"url": "http://localhost:8000", "description": "Local JinaD server"}]}